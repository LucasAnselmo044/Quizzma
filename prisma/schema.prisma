generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  username      String?   @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  quizzes       Quiz[]    @relation("UserQuizzes") // Adicionando nome à relação
  results       Result[]

  role String @default("user")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Quiz {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  categoryId  Int
  category    Category   @relation(fields: [categoryId], references: [id])
  questions   Question[]
  userId      String? // Alterado para String para combinar com User.id
  creator     User?      @relation("UserQuizzes", fields: [userId], references: [id]) // Adicionando a relação inversa

  results Result[]
}

model Question {
  id              Int      @id @default(autoincrement())
  text            String
  quizId          Int
  quiz            Quiz     @relation(fields: [quizId], references: [id])
  options         Option[]
  correctOptionId Int?
}

model Option {
  id         Int      @id @default(autoincrement())
  text       String
  isCorrect  Boolean
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
}

model Result {
  id     Int    @id @default(autoincrement())
  score  Int
  userId String
  user   User   @relation(fields: [userId], references: [id])
  quizId Int
  quiz   Quiz   @relation(fields: [quizId], references: [id])
}

model Category {
  id      Int    @id @default(autoincrement())
  name    String @unique
  quizzes Quiz[] // Relacionamento com Quiz
}
